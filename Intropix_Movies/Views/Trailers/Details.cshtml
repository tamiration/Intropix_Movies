@model Intropix_Movies.Models.Trailers

@{
    ViewData["Title"] = "Details";
}

<h2>Details</h2>

<div>
    <h4>Trailers</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Lenght)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Lenght)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Source_link)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Source_link)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Summary)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Summary)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Rating)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Rating)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.filming_location)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.filming_location)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.Studio_id)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.Studio_id)
        </dd>
    </dl>
</div>

<div id="player">

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: 'orcb4veeLnY',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
        }
    }
    function stopVideo() {
        player.stopVideo();
    }

</script>
</div>
<div>
    <iframe width="800" height="800" frameborder="0" src="https://www.bing.com/maps/embed?h=400&w=500&cp=32.0667~34.766699999999986&lvl=11&typ=d&sty=r&src=SHELL&FORM=MBEDV8" scrolling="no">
    </iframe>
    <div style="white-space: nowrap; text-align: center; width: 500px; padding: 6px 0;">
    </div>
    <Grid x:Name="LayoutRoot" Background="White">
        <m:Map CredentialsProvider="AuBZfo1y5fRyE0B-N4C2ojNq50zj0J2-skCr2oempgGnR3Z2MyT99FWr56yraD2c"
               Center="47.620574,-122.34942" ZoomLevel="12">
            <m:Pushpin Location="47.620574,-122.34942"/>
        </m:Map>
    </Grid>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model.ID">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
